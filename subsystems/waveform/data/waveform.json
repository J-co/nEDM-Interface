
{
  "_id" : "waveform",
  "type" : "control",
  "title" : "Sending a Waveform",
  "description" : "Sending a Waveform",
  "wsuri"  : "192.168.1.113:9100",
  "html": """
<h3>Status</h3>
<div id="status">Not Connected!</div>
<b>Select Waveform:</b>
<table>
	<tr>
		<td><select id="listOfWF" size="1"></select></td>
		<td><button type="button" id="sendWFButton" size="400">Send selected Waveform</button></td>
	      	<td>
			<a href="#popupDialog" data-rel="popup" data-position-to="window" data-transition="pop"
				class="ui-btn ui-corner-all ui-shadow ui-btn-inline ui-icon-delete ui-btn-icon-left">Delete selected Waveform</a>
			<div data-role="popup" id="popupDialog" data-dismissible="false" style="max-width:500px;">
				<div data-role="header"><h1>Delete Waveform?</h1></div>
				<div role="main" class="ui-content">
					<h3 class="ui-title">Are you sure you want to delete this Waveform?</h3>
					<p>This action cannot be undone.</p>
    					<a href="#" class="ui-btn ui-corner-all ui-shadow ui-btn-inline " data-rel="back">Cancel</a>
     					<a href="#" id="deleteWF" class="ui-btn ui-corner-all ui-shadow ui-btn-inline" data-rel="back" data-transition="flow">Delete</a>
    			</div>
			</div>
		</td>
	</tr>
	<tr>
		<td><button type="button" id="triggerWF">Trigger Waveform</button></td>
		<td><label><input type="checkbox" id="CB_draw">Show Waveform</label></td>
	</tr>
</table>
<br /><br />
<h3>Preview of selected Waveform</h3>
<div id="preview" style="width:600px; height:300px;"></div>
<br /><br />
<h3>Set Parameters</h3>
<table>
	<tr><th>Element</th><td><select id="element_" size="1" >
	  <option value="3">Helium & Xenon</option>
	  <option value="1">Helium</option>
	  <option value="2">Xenon</option>
	</select></td></tr>
	<tr><th>B0 Field in muT (Float)</th><td><input type="text" id="b0_" size="30" /></td></tr>
	<tr><th>First Burst Time (Float)</th> <td><input type="text" id="f_b_t" size="30" /></td></tr>
	<tr><th>Measuring Time (Float)</th> <td><input type="text" id="m_t" size="30" /></td></tr>
	<tr><th>Burst Width FWHM (Float)</th> <td><input type="text" id="s_" size="30" /></td></tr>
	<tr><th>Sampling Frequency (Integer)</th> <td><input type="text" id="s_f" size="30" /></td></tr>
	<tr><th>Length (Integer)</th> <td><input type="text" id="l_" size="30" disabled=true /> </td></tr>
	<tr><th>Number of Bursts (Integer)</th> <td><input type="text" id="n_cyc" size="30" /> </td></tr>
	<tr><th>Flip Angle Degree (Float)</th> <td><input type="text" id="angle_" size="30" /> </td></tr>
	<tr><th>Resulting B1 Field (muT)</th> <td><input type="text" id="b1_" size="30" readOnly=true /> </td></tr>
	<tr><th>Resulting Bandwidth (Hz)</th> <td><input type="text" id="band_" size="30" readOnly=true /> </td></tr>
</table>
<br /><br />
<table>
	<tr>
		<td><button type="button" id="sendButton" size="400">Send (without saving)</button></td>
		<td><button type="button" id="restoreButton" size="400">Restore Defaults</button></td>
	</tr>
</table>
<br /><br />
<h3>Save Waveform to Database</h3>
<table>
	<tr>
		<th>Name: </th>
		<td><input type="text" id="name" size="30" value="Default" /></td>
		<td><button type="button" id="savebutton" size="400">Save</button></td>
	</tr>
</table>
""",
  "script": """
function($theDOM, docobj)
{
	var wsuri = "ws://" + docobj.wsuri;
	var measuring_time = "2";
	var sig = "1";
	var sampling_freq = "100000";
	var f_burst_time = "0.5";
	var len = "40000";
	var b0 = "1.2";
	var ncyc = "36";
	var angle = "10.0";
	var cell = "3";
	var b1;
	var bandw;
	var listNotEmpty = false;
	var namesList;
	var autobahn = require("autobahn");
	var dygraph = require("dygraph-combined");
	var socket = null;
	var isopen = false;
	socket = new WebSocket(wsuri);
	socket.binaryType = "arraybuffer";
	socket.onopen = function()
	{
		print("Connected!", true);
		isopen = true;
		sendCmd(["get NamesList"]);
	};
	function print(logText)
	{
		console.log(logText);
		$('#status').empty();
		$('#status').text("Status: " + logText);
	}
	socket.onmessage = function(e)
	{
		var cmd;
		var hdrLen;
		var hdr;
		if (typeof e.data === "string")
		{
			var str = e.data;
			var pos = str.indexOf(":");
			hdrLen = parseInt(str.slice(0, pos));
			pos += 1;
			hdr = str.slice(pos, pos + hdrLen);
			var array = JSON.parse(hdr);
			console.log("Received Text: ", array);
			cmd = array[0];
			cbdraw = document.getElementById("CB_draw").checked;
			if(cmd === "NamesList") UpdateListOfWF(array[1]);
			if(cmd === "Draw" && cbdraw)
			{
				var name = array[1];
				var id = 0;
				for(i = 0; i<namesList.length; i++)
					if(namesList[i]===name)
						id = i;
				document.getElementById("listOfWF").selectedIndex = id;
				$('#listOfWF').selectmenu("refresh");
				print("Drawing Waveform '" + name + "'");
				sendCmd(["get Waveform", name]);
			}
			if(cmd === "Info")
			{
				print("Server Info: " + array[1]);
			}
			if(cmd === "Sending Success")
				print("ready");
			if(cmd === "Sending Failure")
				print("Sending Waveform to Waveform Generator failed! - ready");
		}
		else
		{
			var dv = new DataView(e.data);
			hdrLen = dv.getInt32(0, true);
			var start = 4+hdrLen;
			var totalLength = (new Uint8Array(e.data)).length;
			var dataLen = totalLength-start;
			hdr = JSON.parse(String.fromCharCode.apply(
					null, new Uint8Array(e.data, 4, hdrLen)));
			console.log("Header: ", hdr);
			cmd = hdr[0];
			if(cmd === "Waveform")
			{
				var samplingFreq = parseInt(hdr[1]);
				console.log("Sampling Freq: ", samplingFreq);
				console.log("Startpoint ", start, "Data Length: ", dataLen);
				dv = new DataView(e.data, start, dataLen);
				var iMax = dataLen / 8;//64bit (8byte) Floats
				var data = new Float64Array(iMax);
				for(i = 0; i<iMax; i++)
				{
					data[i] = dv.getFloat64(i*8, true);
				}
				var graphdata = new Array(iMax);
				for(i = 0; i < iMax; i++)
					graphdata[i] = new Array(i / samplingFreq, data[i]);
				Draw(graphdata);
			}
			else
				print("Error: unknown cmd");
		}
	};
	socket.onclose = function(e)
	{
		print("Connection closed.");
		socket = null;
		isopen = false;
	};
	function sendCmd(cmd)
	{
		cmd = JSON.stringify(cmd);
		if (isopen)
		{
			socket.send(cmd);
			console.log("Command send: ", cmd);
		}
		else print("Connection not opened.");
	}
	document.getElementById("sendButton").onclick = Send;
	document.getElementById("restoreButton").onclick = Restore;
	document.getElementById("savebutton").onclick = Save;
	document.getElementById("sendWFButton").onclick = SendWF;
	document.getElementById("listOfWF").onchange = SelectionChanged;
	document.getElementById("deleteWF").onclick = DeleteWF;
	document.getElementById("triggerWF").onclick = TriggerWF;
	document.getElementById("element_").onchange = UpdateResults;
	Restore();
	UpdateResults();
	function TriggerWF()
	{
		print("Triggering current Waveform");
		sendCmd(["trigger WF"]);
	}
	function Send()
	{
		print("sending custom Waveform");
		UpdateParameters();
		sendCmd(["send CustomWF",
			[b0, f_burst_time, sampling_freq, sig, measuring_time, len, ncyc, angle, cell]
			]);
	}
	function Restore()
	{
		document.getElementById("f_b_t").value = "0.5";
		document.getElementById("s_").value = "1";
		document.getElementById("s_f").value = "100000";
		document.getElementById("b0_").value = "1.2";
		document.getElementById("m_t").value = "2";
		document.getElementById("n_cyc").value = "36";
		document.getElementById("angle_").value = "10";
		UpdateParameters();
	}
	function Save()
	{
		print("saving Waveform");
		var name = GetDataNameFromTextbox();
		UpdateParameters(name);
		sendCmd(["save Waveform", name,
			[b0, f_burst_time, sampling_freq, sig, measuring_time, len, ncyc, angle, cell]]);
	}
	function SendWF()
	{
		var name = GetDataNameFromList();
		print("sending Waveform '" + name + "'");
		sendCmd(["send Waveform", name]);
	}
	function SelectionChanged()
	{
		var cbdraw = document.getElementById("CB_draw").checked;
		if(listNotEmpty && cbdraw)
		{
			var name = GetDataNameFromList();
			console.log("Selected WF index: ", name);
			print("Drawing saved Waveform: " + name);
			sendCmd(["get Waveform", name]);
		}
	}
	function ElementChanged()
	{
		var ce = document.getElementById("element_");
		cell = ce.options[ce.selectedIndex].value;
	
	}
	function DeleteWF()
	{
		var name = GetDataNameFromList();
		sendCmd(["delete Waveform", name]);
		listNotEmpty = false;
	}
	function Draw(data)
	{
		var cbdraw = document.getElementById("CB_draw").checked;
		if(cbdraw)
		{
			console.log("Drawing: ", GetDataNameFromList());
			var graph = document.getElementById("preview");
			g = new dygraph.Dygraph(graph,
				data, {labels: [ "Time t", "V"]}
				);
			print("ready");
		}
	}
	function UpdateListOfWF(list)
	{
		namesList = list;
		$('#listOfWF').empty();
		for (var i = 0; i<list.length; i++)
		{
			$('#listOfWF').append($("<option/>").val(list[i])
                	                                    .text(list[i])
                		);
		}
		if(list.length > 0)
		{
			if(listNotEmpty === false)
			{
				listNotEmpty = true;
				SelectionChanged();
			}
			else
				listNotEmpty = true;
		}
		else
		{
			listNotEmpty = false;
			$('#preview').empty();
		}
		$('#listOfWF').selectmenu("refresh");
		console.log("List of Waveforms updated");
	}
	function GetDataNameFromList() // DONE!
	{
		var nameID = parseInt(document.getElementById("listOfWF").selectedIndex);
		var dataName = namesList[nameID];
		console.log("Name of selected index: ", dataName);
		return dataName;
	}
	function GetDataNameFromTextbox()//Done!
	{
		var dataName = document.getElementById("name").value;
		console.log("Name from Textbox: ", dataName);
		return dataName;
	}
	function UpdateParameters() //DONE!
	{
		b0 = 		document.getElementById("b0_").value;
		f_burst_time = 	document.getElementById("f_b_t").value;
		measuring_time=	document.getElementById("m_t").value;
		sig = 		document.getElementById("s_").value;
		sampling_freq = document.getElementById("s_f").value;
		len = 		document.getElementById("l_").value;
		ncyc = 		document.getElementById("n_cyc").value;
		angle = 	document.getElementById("angle_").value;
		ElementChanged();
		b1 = 		document.getElementById("b1_").value;
		bandw = 	document.getElementById("band_").value;
		
	}
	
	function Calculate()
	{
		var pitimes2 = 6.2831853071795;
		var sqrt2pi = 2.5066282746;
		var b1g = (angle/360*pitimes2)/(sqrt2pi*sig/(2.35482));
		var gam_he = 32.4341;
		var gam_xe = 11.77717;
		if (cell == 1){
			b1 = b1g/(gam_he*pitimes2);
		}
		else if (cell == 2){
			b1 = b1g/(gam_xe*pitimes2);
		}
		else if (cell == 3){
			b1 = b1g/(gam_he*pitimes2) + b1g/(gam_xe*pitimes2);
		}
		
		var bbconst = 1.662257;
		bandw = bbconst/sig;
		len = 0;
		if (f_burst_time > 2*sig){
			len = f_burst_time;
		}
		else{
			len = 2*sig;
		}
		len = Math.ceil((len - (-(ncyc-1))*measuring_time - (-2*sig))*sampling_freq);
	
	}
	
	function UpdateResults()
	{
		UpdateParameters();
		ConsistencyCheck();
		Calculate();
		document.getElementById("b1_").value = b1;
		document.getElementById("band_").value = bandw;
		document.getElementById("f_b_t").value = f_burst_time;
		document.getElementById("l_").value = len;
	}
	
	function ConsistencyCheck()
	{
		if (f_burst_time < 2*sig){
			f_burst_time = 2*sig;
		}
	}
	
	document.oninput = function ()
	{
		UpdateResults();
	};
}
"""

}
