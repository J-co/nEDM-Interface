{
    "_id" : "fast_control",
    "type" : "control",
    "title" : "Measurement Controls",
    "description" : "Controls of HH coils, HV, pulsing/field switch and Squids",
    "html" : """

<div>
    <div class='ui-grid-a' style='margin-bottom:3em'>
      <div class='squid_control ui-block-a'>
        <h3>Squid controls</h3>
        <div class='squid_status'>
        <table style='text-align:center' width='90%' align='center'>
          <tr>
            <td>X1</td>
            <td>Y1</td>
            <td>Z1</td>
            <td>X2</td>
            <td>Y2</td>
            <td>Z2</td>
          </tr>
          <tr>
            <td align='center'><div class='X1_squid_status_light control_status nedm-status-r'></div></td>
            <td align='center'><div class='Y1_squid_status_light control_status nedm-status-r'></div></td>
            <td align='center'><div class='Z1_squid_status_light control_status nedm-status-r'></div></td>
            <td align='center'><div class='X2_squid_status_light control_status nedm-status-r'></div></td>
            <td align='center'><div class='Y2_squid_status_light control_status nedm-status-r'></div></td>
            <td align='center'><div class='Z2_squid_status_light control_status nedm-status-r'></div></td>
          </tr>
        </table>
        </div>
      </div>
      <div class='hv_control ui-block-b ui-responsive'>
        <h3>Field controls</h3>
        <button class='pulse'>Send NMR pulse</button>
      </div>
      <div class='squid_control ui-block-a'>
        <table style='text-align:center' width='90%' align='center'>
          <tr>
            <td><input type='text' class='output_text X1' data-wrapper-class='controlgroup-textinput ui-btn' disabled></td>
            <td><input type='text' class='output_text Y1' data-wrapper-class='controlgroup-textinput ui-btn' disabled></td>
            <td><input type='text' class='output_text Z1' data-wrapper-class='controlgroup-textinput ui-btn' disabled></td>
            <td><input type='text' class='output_text X2' data-wrapper-class='controlgroup-textinput ui-btn' disabled></td>
            <td><input type='text' class='output_text Y2' data-wrapper-class='controlgroup-textinput ui-btn' disabled></td>
            <td><input type='text' class='output_text Z2' data-wrapper-class='controlgroup-textinput ui-btn' disabled></td>
          </tr>
        </table>
      </div>
      <div class='ui-block-b'>
		  <div class='ui-grid-a'>
		    <div class='ui-block-a' style='width:33%'>
		      <h4>Magnicons</h4>
		    </div>
			<div class='ui-block-b' style='width:67%' data-role='controlgroup' data-type='horizontal'>
              <select required class='msr_coil'>
				<option value='x'>B<sub>x</sub></option>
				<option value='y'>B<sub>y</sub></option>
				<option value='z'>B<sub>z</sub></option>
              </select>
              <input type='text' class='input_val msr_curr' size='5' data-wrapper-class='controlgroup-textinput ui-btn'>
              <button class='set_msr_field'>Set I (&#956;A)</button>
            </div>
          </div>
      </div>
      <div class='ui-block-a ui-grid-a'>
        <div class='ui-block-a'>
			<a href='#SquidAdjustPopup' data-rel='popup' class='squid_control ui-btn ui-corner-all'>Squid Settings</a>
        </div>
        <div class='ui-block-b' data-type='horizontal'>
        <label>Lock Squids</label>
        <select style="margin-left : auto; margin-right : auto;" class="set_squid_mode" data-role="slider">
            <option value="amp">Amp</option>
            <option value="fll">FLL</option>
        </select>
        </div>
      </div>
      <div class='ui-block-b ui-grid-b'>
          <div class='ui-block-a'>
            <h4>Field switch</h4>
          </div>
          <div class='ui-block-b' data-type='horizontal'>
			<label>Coil 1/2</label>
            <select style="margin-left : auto; margin-right : auto;" class="set_coil_switch" data-role="slider">
              <option value='1'>Coil 1</option>
              <option value='2'>Coil 2</option>
            </select>
          </div>
          <div class='ui-block-c' data-type='horizontal'>
			<label>Coils/Resistors</label>
            <select style='margin-left:auto; margin-right:auto' class='set_coil_res' data-role='slider'>
              <option value='1'>Coil</option>
              <option value='0'>&#937;</option>
            </select>
          </div>
      </div>
	</div>
	<div class='ui-grid-a'>
      <div class='ui-block-a'>
		  <h3>HV Controls</h3>
		  <div class='ui-grid-a'>
			  <div class='ui-block-a'>
				<a href='#NMRPopup' data-rel='popup' class='ui-btn ui-corner-all'>NMR Controls</a>
			  </div>
			  <div class='ui-block-b'>
				<a href='#HVPopup' data-rel='popup' class='ui-btn ui-corner-all'>HV Controls</a>
			  </div>
		  </div>
      </div>
      <div class='ui-block-b'>
		  <h3>Rail Controls</h3>
		  <div class='ui-grid-c'>
			<div class='ui-block-a'>
				<button class='set_value_class rail_in'>In</button>
			</div>
			<div class='ui-block-b'>
				<button class='set_value_class rail_out'>Out</button>
			</div>
			<div class='ui-block-c'>
				<button class='set_value_class rail_ref'>Reset</button>
			</div>
			<div class='ui-block-d'>
				<button class='set_value_class rail_stop'>Stop</button>
			</div>
		  </div>
      </div>
    </div>
</div>

<div data-role='popup' data-transition='pop' style='width:120%' data-position-to='window' id='SquidAdjustPopup' class='ui-content'>
    <h3>Squid Settings</h3>
</div>

<div data-role='popup' data-transition='pop' style='width:120%' data-position-to='window' id='NMRPopup' class='ui-content'>
    <h3>NMR Controls</h3>
    <div class='ui-grid-b'>
        <div class='ui-block-a'>
            <label>Frequency [Hz]:</label>
            <input type='text' size='1' class='input_val nmr_freq_val' value='0' data-wrapper-class='controlgroup-textinput ui-btn'>
        </div>
        <div class='ui-block-b'>
            <label>Amplitude [V]:</label>
            <input type='text' size='1' class='input_val nmr_amp_val' value='0.2' data-wrapper-class='controlgroup-textinput ui-btn'>
        </div>
    	<div class='ui-block-c'>
            <label>Pulse Length [s]:</label>
            <input type='text' size='1' class='input_val nmr_dur_val' value='0' data-wrapper-class='controlgroup-textinput ui-btn'>
        </div>
    </div>
    <div class='ui-grid-solo'>
		<div class='ui-block-a'>
			<button class='set_value_class nmr_set_para'>Set Parameters</button>
			<button class='set_value_class nmr_measure'>Measure</button>
		</div>
	</div>
<!--    <div id="graphdiv"></div> -->
    <a href="#" data-rel="back" class="ui-btn ui-corner-all ui-shadow ui-btn ui-icon-delete ui-btn-icon-notext ui-btn-left">Close</a>
</div>

<div data-role='popup' data-transition='pop' style='width:120%' data-position-to='window' id='HVPopup' class='ui-content'>
    <h3>HV Controls</h3>
<!--    <button style='background-color:#FF0000' class='hv_emergency_stop'>Emergency OFF</button> -->
    <div class='hv_control ui-grid-a'>
      <div class='hv_1_control ui-block-a'>
        <h4>Positive</h4>
        <div data-role='controlgroup' data-type='horizontal'>
            <select style="margin-left : auto; margin-right : auto;" class="set_hv1_status" data-role="slider">
                <option value=0>OFF</option>
                <option value=1>ON</option>
            </select>
            <div style='float:left' class='hv1_status_light control_status nedm-status-r'> </div>
        </div>
        <div class='ui-grid-a'>
            <div class='ui-block-a'>
                <p style='text-align:center'>Current HV1 value (kV)</p>
            </div>
            <div class='ui-block-b'>
                <input type='text' size='1' class='output_text cur_hv1' data-wrapper-class='controlgroup-textinput ui-btn' disabled>
            </div>
        </div>
      </div>
      <div class='hv_2_control ui-block-b'>
        <h4>Negative</h4>
        <div data-role='controlgroup' data-type='horizontal'>
            <select style="margin-left : auto; margin-right : auto;" class="set_hv2_status" data-role="slider">
                <option value=0>OFF</option>
                <option value=1>ON</option>
            </select>
            <div style='float:left' class='hv2_status_light control_status nedm-status-r'> </div>
        </div>
        <div class='ui-grid-a'>
            <div class='ui-block-a'>
                <p style='text-align:center'>Current HV2 value (kV)</p>
            </div>
            <div class='ui-block-b'>
                <input type='text' size='1' class='output_text cur_hv2' data-wrapper-class='controlgroup-textinput ui-btn' disabled>
            </div>
        </div>
      </div>
    </div>
    <div class='hv_control ui-grid-e' data-role='fieldcontain'>
        <div class='hv_1_control ui-block-a'>
            <p>Set HV value (kV)</p>
            <input type='text' size='1' class='output_HV_value_1' value=0.0 data-wrapper-class='controlgroup-textinput ui-btn' disabled>
        </div>
        <div class='hv_1_control ui-block-b'>
            <p>Set step size (kV)</p>
            <input type='text' size='1' class='output_HV_step_1' value=0.1 data-wrapper-class='controlgroup-textinput ui-btn' disabled>
        </div>
        <div class='hv_1_control ui-block-c'>
            <p>Ramp time (s)</p>
            <input type='text' size='1' class='output_HV_ramptime_1' value=0 data-wrapper-class='controlgroup-textinput ui-btn' disabled>
        </div>
        <div class='hv_1_control ui-block-d'>
            <p>Set HV value (kV)</p>
            <input type='text' size='1' class='output_HV_value_2' value=0.0 data-wrapper-class='controlgroup-textinput ui-btn' disabled>
        </div>
        <div class='hv_1_control ui-block-e'>
            <p>Set step size (kV)</p>
            <input type='text' size='1' class='output_HV_step_2' value=0.1 data-wrapper-class='controlgroup-textinput ui-btn' disabled>
        </div>
        <div class='hv_1_control ui-block-f'>
            <p>Ramp time (s)</p>
            <input type='text' size='1' class='output_HV_ramptime_2' value=0 data-wrapper-class='controlgroup-textinput ui-btn' disabled>
        </div>
    </div>
    <div class='hv_control ui-grid-c' data-role='fieldcontain'>
        <div class='hv_1_control ui-block-a'>
            <button class='set_value_class set_hexe_hv hv1'>Set HV (kV)</button>
            <button class='set_value_class set_hexe_hv_step hv1' value='10'>Set step size (kV/0.5s)</button>
        </div>
        <div class='hv_1_control ui-block-b'>
            <input type='text' class='input_val hexe_hv1_value' size='1' data-wrapper-class='controlgroup-textinput ui-btn'>
            <input type='text' class='input_val hexe_hv1_step' size='1' value=0.1 data-wrapper-class='controlgroup-textinput ui-btn'>
        </div>
        <div class='hv_2_control ui-block-c'>
            <input type='text' class='input_val hexe_hv2_value' size='1' data-wrapper-class='controlgroup-textinput ui-btn'>
            <input type='text' class='input_val hexe_hv2_step' size='1' value = 0.1 data-wrapper-class='controlgroup-textinput ui-btn'>
        </div>
        <div class='hv_2_control ui-block-d'>
            <button class='set_value_class set_hexe_hv hv2'>Set HV (kV)</button>
            <button class='set_value_class set_hexe_hv_step hv2' value='10'>Set step size (kV/0.5s)</button>
        </div>
    </div>
    <div class='hv_control ui-grid-a'>
        <div data-role='controlgroup' data-type='horizontal' class='hv_1_control ui-block-a'>
            <button class='set_value_class hv1 hexe_hv_ramp' value='ramp'>Ramp</button>
            <button class='set_value_class hv1 hexe_hv_ramp' value='zero'>Zero</button>
            <button class='set_value_class hv1 hexe_hv_ramp' value='stop'>Stop</button>
        </div>
        <div data-role='controlgroup' data-type='horizontal' class='hv_2_control ui-block-b'>
            <button class='set_value_class hv2 hexe_hv_ramp' value='ramp'>Ramp</button>
            <button class='set_value_class hv2 hexe_hv_ramp' value='zero'>Zero</button>
            <button class='set_value_class hv2 hexe_hv_ramp' value='stop'>Stop</button>
        </div>
    </div>
    <a href="#" data-rel="back" class="ui-btn ui-corner-all ui-shadow ui-btn ui-icon-delete ui-btn-icon-notext ui-btn-left">Close</a>
</div>
""",
    "script" : """
function($theDiv, anobj) {

    var disable_all = function() {
    $(':input').addClass('ui-disabled');
    };

    var enable_all = function() {
    $(':input').removeClass('ui-disabled');
    };

    var toastr = require("toastr");

    var squid_stati = {squid_x1_status:'X1', squid_x2_status:'X2', squid_y1_status:'Y1', squid_y2_status:'Y2', squid_z1_status:'Z1', squid_z2_status:'Z2'};
    var squid_voltages = {squid_x1_v:'X1', squid_x2_v:'X2', squid_y1_v:'Y1', squid_y2_v:'Y2', squid_z1_v:'Z1', squid_z2_v:'Z2'};

    function check_squids(recent_vars) {
        for (var v in recent_vars) {
            if (squid_stati[v]) {
              var stat = recent_vars[v];
              if (stat.value == 1.0){
                  $('.' + squid_stati[v] + '_squid_status_light').removeClass('control_status nedm-status-g');
                  $('.' + squid_stati[v] + '_squid_status_light').addClass('control_status nedm-status-r');
              }
              if (stat.value === 0.0){
                  $('.' + squid_stati[v] + '_squid_status_light').removeClass('control_status nedm-status-r');
                  $('.' + squid_stati[v] + '_squid_status_light').addClass( 'control_status nedm-status-g');
              }
            }
            if (squid_voltages[v]) {
              var obj = recent_vars[v];
              if (obj.value > 10.0) {
                  $('.' + squid_voltages[v] + '_squid_status_light').removeClass('control_status nedm-status-g');
                  $('.' + squid_voltages[v] + '_squid_status_light').addClass('control_status nedm-status-r');
              }
              $('.output_text ' + squid_voltages[v]).val(obj.value);
            }
        }
    }

    $(function() {
        nedm.get_database('nedm%2Fhexe_edm').on("latest", check_squids);
    });

    var init_switches = {squid_mode:'.set_squid_mode', hv_enable_1:'.set_hv1_status', hv_enable_2:'.set_hv2_status'};

    function init_switch(switchname) {
        return function(e,o) {
            if (e !== null) return;
            if (o.rows.length != 1) return;
            $(switchname).val(o.rows[0].value);
            $(switchname).slider('refresh');
        };
    }

    $(function() {
        for (var i in init_switches) {
            nedm.get_database('nedm%2Fhexe_edm').get_most_recent_value(i, init_switch(init_switches[i]));
        }
    });

    $('.set_squid_mode', $($theDiv)).on('change', function() {
        disable_all();
        var args = [$('.set_squid_mode option:selected').val()];
        nedm.send_command({cmd_name: 'set_squid_mode',
        arguments: args,
        timeout: 5000,
        callback: function(e,o) {
            enable_all();
            }
        });
    });

    $('.squid_adjust', $($theDiv)).on('click', function() {
        disable_all();
        nedm.send_command({cmd_name: 'open_squid_viewer',
        timeout: 5000,
        callback: function(e,o){
            enable_all();
            }
        });
    });

    $('.pulse', $($theDiv)).on('click', function(ev, ui) {
        $(ev.currentTarget).button("option", "disabled", true);
        nedm.get_database("nedm%2Fnmr_system").send_command({
        cmd_name: 'send_trigger',
        timeout: 5000,
        callback: function(e,o){
            $(ev.currentTarget).button("option", "disabled", false);
            }
        });
    });

    function init_coils(coilx) {
        return function(e,o) {
            if (e !== null) return;
            if (o.rows.length != 1) return;
            if (o.rows[0].value === 0 && coilx === 0) {
                $('.set_coil_res').val(0);
                $('.set_coil_res').slider('refresh');
            }
            else if (o.rows[0].value == 1 && coilx === 0) {
                $('.set_coil_res').val(1);
                $('.set_coil_res').slider('refresh');
                $('.set_coil_switch').val(2);
                $('.set_coil_switch').slider('refresh');
            }
            else if (o.rows[0].value === 0 && coilx == 1) {
                $('.set_coil_res').val(1);
                $('.set_coil_res').slider('refresh');
                $('.set_coil_switch').val(1);
                $('.set_coil_switch').slider('refresh');
            }
            else {
                toastr.error("Undefined coil status or both coils on");
            }
        };
    }

    function check_coily(e,o) {
        if (e !== null) return;
        if (o.rows.length != 1) return;
        nedm.get_database('nedm%2Fhexe_edm').get_most_recent_value ('MSRcoil2', initcoils(o.rows[0].value));
    }

    $(function() {
        nedm.get_database('nedm%2Fhexe_edm').get_most_recent_value('MSRcoil1', check_coily);
    });

    var coil_switch_select = "1";
    var coil_or_resistor = '1';

    $('.set_coil_switch', $($theDiv)).on('change', function() {
        coil_switch_select = $('.set_coil_switch option:selected').val();
        if (coil_or_resistor == '1') {
            disable_all();
            var args = [coil_switch_select];
            nedm.get_database('nedm%2Finternal_coils').send_command({cmd_name: 'set_coil',
            arguments: args,
            timeout: 5000,
            callback: function(e,o) {
                enable_all();
                }
            });
        }
    });

    $('.set_coil_res', $($theDiv)).on('change', function() {
        coil_or_resistor = $('.set_coil_res option:selected').val();
        disable_all();
        var args = [];
        if (coil_or_resistor == '1') args = [coil_switch_select];
        else args = ['0'];
        nedm.get_database('nedm%2Finternal_coils').send_command({cmd_name: 'set_coil',
        arguments: args,
        timout:5000,
        callback: function(e,o) {
            enable_all();
            }
        });
    });

    $('.set_msr_field', $($theDiv)).on('click', function() {
        disable_all();
        var coil = $('.msr_coil option:selected').val();
        var val = $('.msr_curr').val();
        var args = [coil, val];
        nedm.send_command({cmd_name: 'set_msr_field',
        arguments: args,
        timout: 5000,
        callback: function(e,o) {
            enable_all();
            }
        });
    });

    var hv_stati = {hv_enable_1:'hv1', hv_enable_2:'hv2'};

    function check_hv_status(recent_vars) {
        for (var v in hv_stati) {
            if (recent_vars[v]) {
                var stat = recent_vars[v];
                if (stat.value === 0.0){
                  $('.' + hv_stati[v] + '_status_light ').removeClass('control_status nedm-status-g');
                  $('.' + hv_stati[v] + '_status_light ').addClass('control_status nedm-status-r');
                }
                else if (stat.value == 1.0){
                  $('.' + hv_stati[v] + '_status_light ').removeClass('control_status nedm-status-r');
                  $('.' + hv_stati[v] + '_status_light ').addClass( 'control_status nedm-status-g');
                }
            }
        }
    }

    $(function() {
        nedm.get_database('nedm%2Fhexe_edm').on("latest", check_hv_status);
    });

    var current_hvs = {hv_monitor_1:'cur_hv1', hv_monitor_2:'cur_hv2'};

    function update_hv_value(recent_vars) {
        for (var v in current_hvs) {
            if (recent_vars[v]) {
              $('.' + current_hvs[v]).val(recent_vars[v].value);
            }
        }
    }

    $(function() {
        nedm.get_database('nedm%2Fhexe_edm').on("latest", update_hv_value);
    });

    $('.set_hv1_status').on('change', function() {
        disable_all();
        var args = ['1', $('.set_hv1_status option:selected').val()];
        nedm.send_command({cmd_name: 'enable_high_voltage',
        arguments: args,
        timeout: 5000,
        callback: function(e, o) {
            enable_all();
            }
        });
    });

    $('.set_hv2_status').on('change', function() {
        disable_all();
        var args = ['2', $('.set_hv2_status option:selected').val()];
        nedm.send_command({cmd_name: 'enable_high_voltage',
        arguments: args,
        timeout: 5000,
        callback: function(e, o) {
            enable_all();
            }
        });
    });

    var hv_value = [0.0, 0.0];
    var hv_stepsize = [0.1, 0.1];
    var hv_stop = false;

    function calc_ramptime_1(e, o) {
        if (e !== null) {
              $('.output_HV_ramptime_1').val('unknown');
              toastr.error("Can't calculate ramp time - Error reading current HV value");
            }
        if (o.rows.length != 1) {
              $('.output_HV_ramptime_1').val('unknown');
              toastr.error("Can't calculate ramp time - Error reading current HV value");
            }
        else {
            val_old = Math.abs(o.rows[0].value);
            calc = 0;
            if (hv_value[0] >= val_old) {
                calc = (hv_value[0] - val_old)/(2*hv_stepsize[0]);
            }
            else {
                calc = (val_old - hv_value[0])/(2*hv_stepsize[0]);
            }
            $('.output_HV_ramptime_1').val(calc);
        }
    }

    function calc_ramptime_2(e, o) {
        if (e !== null) {
              $('.output_HV_ramptime_2').val('unknown');
              toastr.error("Can't calculate ramp time - Error reading current HV value");
            }
        if (o.rows.length != 1) {
              $('.output_HV_ramptime_2').val('unknown');
              toastr.error("Can't calculate ramp time - Error reading current HV value");
            }
        else {
            val_old = Math.abs(o.rows[0].value);
            calc = 0;
            if (hv_value[1] >= val_old) {
                calc = (hv_value[1] - val_old)/(2*hv_stepsize[1]);
            }
            else {
                calc = (val_old - hv_value[0])/(2*hv_stepsize[1]);
            }
            $('.output_HV_ramptime_2').val(calc);
        }
    }

    $('.set_hexe_hv').on('click', function() {
        var v = 0.0;
        if ($(this).hasClass('hv1')) {
          v = parseFloat($('.hexe_hv1_value').val());
          hv_value[0] = v;
          toastr.info('HV value set for HV1');
          $('.output_HV_value_1').val(hv_value[0]);
          nedm.get_database('nedm%2Fhexe_edm').get_most_recent_value('hv_monitor_1', calc_ramptime_1);
        }
        else {
          v = parseFloat($('.hexe_hv2_value').val());
          hv_value[1] = v;
          toastr.info('HV value set for HV2');
          $('.output_HV_value_2').val(hv_value[1]);
          nedm.get_database('nedm%2Fhexe_edm').get_most_recent_value('hv_monitor_2', calc_ramptime_2);
        }
        return;
    });

    $('.set_hexe_hv_step').on('click', function() {
        var t = 0.1;
        if ($(this).hasClass('hv1')) {
          t = parseFloat($('.hexe_hv1_step').val());
          hv_stepsize[0] = t;
          toastr.info('Step size set for HV1');
          $('.output_HV_step_1').val(hv_stepsize[0]);
          nedm.get_database('nedm%2Fhexe_edm').get_most_recent_value('hv_monitor_1', calc_ramptime_1);
        }
        else {
          t = parseFloat($('.hexe_hv2_step').val());
          hv_stepsize[1] = t;
          toastr.info('Step size set for HV2');
          $('.output_HV_step_2').val(hv_stepsize[1]);
          nedm.get_database('nedm%2Fhexe_edm').get_most_recent_value('hv_monitor_2', calc_ramptime_2);
        }
        return;
    });

    var time_out = null;

    function ramp_up(start, step, end, no) {
        var args = [];
        if (start < end) {
            args = [no, start];
            nedm.send_command({cmd_name: 'set_high_voltage',
            arguments: args,
            timeout: 5000
            });
            var newstart = start + step;
            time_out = setTimeout(ramp_up, 500, newstart, step, end, no);
        }
        else {
            args = [no, end];
            nedm.send_command({cmd_name: 'set_high_voltage',
            arguments: args,
            timeout: 5000
            });
        }
    }

    function ramp_down(start, step, end, no) {
        var args = [];
        if (start > end) {
            args = [no, start];
            nedm.send_command({cmd_name: 'set_high_voltage',
            arguments: args,
            timeout: 5000
            });
            var newstart = start - step;
            time_out = setTimeout(ramp_down, 500, newstart, step, end, no);
        }
        else {
            args = [no, end];
            nedm.send_command({cmd_name: 'set_high_voltage',
            arguments: args,
            timeout: 5000
            });
        }
    }

    $('.hexe_hv_ramp').on('click', function() {
        disable_all();
        var step_size = false;
        var hv_supply = false;
        var fin = false;
        if ($(this).hasClass('hv1')) {
          step_size = hv_stepsize[0];
          hv_supply = '1';
          fin = hv_value[0];
        }
        else {
          step_size = hv_stepsize[1];
          hv_supply = '2';
          fin = hv_value[1];
        }
        if (time_out) clearTimeout(time_out);
        function ramp(e,o) {
            if (e !== null) {
                toastr.error("Can't read current HV value!");
            }
            if (o.rows.length != 1) {
                toastr.error("Can't read current HV value!");
            }
            else {
                var v = Math.abs(o.rows[0].value);
                if (fin >= v) {
                    ramp_up(v, step_size, fin, hv_supply);
                }
                else {
                    ramp_down(v, step_size, fin, hv_supply);
                }
            }
        }
        var check_hv = 'hv_monitor_' + hv_supply;
        if ($(this).val() == 'ramp') {
            nedm.get_database('nedm%2Fhexe_edm').get_most_recent_value(check_hv, ramp);
        }
        else if ($(this).val() == 'zero') {
            step_size=1.0;
            fin=0.0;
            nedm.get_database('nedm%2Fhexe_edm').get_most_recent_value(check_hv, ramp);
        }
        else clearTimeout(time_out);
        enable_all();
    });
    
    $('.rail_in').on('click', function() {
        disable_all();
        nedm.send_command({cmd_name : 'rail_control', arguments:["in"],timeout: 5000,
        callback: function(e,o) {
            enable_all();
            }
        });
    });
    $('.rail_out').on('click', function() {
        disable_all();
        nedm.send_command({cmd_name : 'rail_control', arguments:["out"],timeout: 5000,
        callback: function(e,o) {
            enable_all();
            }
        });
    });
    $('.rail_ref').on('click', function() {
        disable_all();
        nedm.send_command({cmd_name : 'rail_control', arguments:["ref"],timeout: 5000,
        callback: function(e,o) {
            enable_all();
            }
        });
    });
    $('.rail_stop').on('click', function() {
        disable_all();
        nedm.send_command({cmd_name : 'rail_control', arguments:["stop"],timeout: 5000,
        callback: function(e,o) {
            enable_all();
            }
        });
    });
    
    $('.nmr_set_para').on('click', function() {
        disable_all();
        var freq = $('.nmr_freq_val').val();
        nedm.send_command({cmd_name : 'nmr_set_frequency', arguments: [freq], timeout: 5000,
        callback: function(e,o) {
            enable_all();
            }
        });
        var amp = $('.nmr_amp_val').val();
        nedm.send_command({cmd_name : 'nmr_set_amplitude', arguments: [amp], timeout: 5000,
        callback: function(e,o) {
            enable_all();
            }
        });
        var dur = $('.nmr_dur_val').val();
        nedm.send_command({cmd_name : 'nmr_set_pulselength', arguments: [dur], timeout: 5000,
        callback: function(e,o) {
            enable_all();
            }
        });                
        
    });
    
    $('.nmr_measure').on('click', function() {
        disable_all();
        nedm.send_command({cmd_name : 'nmr_measure', timeout: 20000,
        callback: function(e,o) {
            enable_all();
            }
        });
    });

}
"""
}
