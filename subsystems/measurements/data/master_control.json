{
  "_id"  : "master_control",
  "type" : "control",
  "title" : "Measurements",
  "description" : """Run measurements
<br><br>
For an example measurement using system functions, see:
<a href='#' class='example_measurement'>example measurement</a>.

To save file(s) to a measurement document with a script see:

<script src="https://gist.github.com/mgmarino/04d92217d227dc99520d.js"></script>

""",
  "order" : 1,
  "protocol_types" : {
    "Command" : {
      "html" : """
            <div class='ui-grid-b'>
              <div class='ui-block-a'>
                <h5>Function:</h5>
                <h5>Argument(s):</h5>
              </div>
              <div class='ui-block-b'>
                <select class='cmd_name'></select>
                <input type="text" class='all_args'>
                <div data-role='collapsible'>
                  <h4>Cmd Info</h4>
                  <div align='left'>
                    <p>Description:<br>
                      <pre class='cmd_info'></pre>
                    </p>
                  </div>
                </div>
              </div>
            </div>
      """,
      "object" : """
      function() {
        function CommandObj() {
          var tthis = this;
          tthis.setup_function = function(adiv, database_cache) {
            var db_name = $('.all_dbs', $(adiv)).find(':selected').val();
            var cmds = $('.cmd_name', $(adiv)).filter(':input');
            var cmd_info = $('.cmd_info', $(adiv));
            cmds.addClass('ui-disabled');
            cmds.empty();
            cmds.on('change', function(e) {
              var dat = cmds.find(':selected').data('obj');
              if (dat && dat.Info) {
                if (typeof dat.Info === 'object') {
                  cmd_info.text(dat.Info.help_msg);
                } else {
                  cmd_info.text(dat.Info);
                }
              }
            });
            database_cache.get_db(db_name).get_commands(function(all_cmds) {
              all_cmds.forEach( function(o) {
                  var j = o.key;
                  cmds.append($('<option/>').val(j).text(j).data({ obj : { Info : o.value[0] } }));
              });
              cmds.removeClass('ui-disabled');
              cmds.selectmenu('refresh', true);
              cmds.trigger('change');
            });
          };
          tthis.save = function(adiv, proc) {
            var args = $('.all_args', $(adiv)).val().trim();
            if (proc) args = proc(args);
            if (args.length !== 0) {
              try {
                args = JSON.parse(args);
              } catch (err) {
              }
            } else {
              args = [];
            }
            return {
              db_name : $('.all_dbs', $(adiv)).find(':selected').val(),
              cmd_name : $('.cmd_name', $(adiv)).find(':selected').val(),
              args : args
            };
          };
          tthis.set = function(adiv, obj) {
            $('select.cmd_name', $(adiv)).val(obj.cmd_name).selectmenu('refresh');
            var args = obj.args;
            if (typeof args === 'object') {
              args = JSON.stringify(args);
            }
            $('.all_args', $(adiv)).val(args);
          };

          tthis.script = function(adiv, proc, cbck) {
            var obj = tthis.save(adiv, proc);
            var db_name = obj.db_name;
            var cmd_name = obj.cmd_name;
            var args = obj.args;
            var dat = $('select.cmd_name', $(adiv)).find(':selected').data('obj');
            if (!Array.isArray(args)) args = [args];
            if (dat && typeof dat.Info === 'object' && dat.Info.language === 'javascript') {
                var func = eval('(' + dat.Info.function + ')');
                return func(args, cbck);
            }
            return nedm.get_database(db_name).send_command( { cmd_name : cmd_name,
              arguments : args,
              callback : cbck,
              quiet : true
            });
          };
        }
        return new CommandObj();
      }
"""
    },
    "Check" : {
      "html" : """
            <div class='ui-grid-b'>
              <div class='ui-block-a'>
                <h5>Variable name:</h5>
                <h5>Min:</h5>
                <h5>Max:</h5>
              </div>
              <div class='ui-block-b'>
                <select class='var_name'/>
                <input type="text" class='var_min'>
                <input type="text" class='var_max'>
              </div>
            </div>
      """,
      "object" : """
        function() {
          function CheckObj() {
             var tthis = this;
             tthis.setup_function = function(adiv, database_cache) {
               var db_name = $('.all_dbs', $(adiv)).find(':selected').val();
               var vars = $('.var_name', $(adiv)).filter(':input');
               vars.addClass('ui-disabled');
               vars.empty();
               database_cache.get_db(db_name).get_variables(function(all_vars) {
                 for (var i=0;i<all_vars.length;i++) {
                    var k = all_vars[i].key[0];
                    vars.append($('<option/>').val(k).text(k));
                 }
                 vars.removeClass('ui-disabled');
                 vars.selectmenu('refresh', true);
               });
             };
             tthis.save = function(adiv, proc) {
               proc = proc || function(o) { return o; };
               return {
                 db_name : $('.all_dbs', $(adiv)).find(':selected').val(),
                 var_name : $('.var_name', $(adiv)).find(':selected').val(),
                 var_min : parseFloat(proc($('.var_min', $(adiv)).val())),
                 var_max : parseFloat(proc($('.var_max', $(adiv)).val()))
               };
             };
             tthis.set = function(adiv, obj) {
               $('.var_name', $(adiv)).filter(':input').val(obj.var_name);
               $('.var_min', $(adiv)).val(obj.var_min);
               $('.var_max', $(adiv)).val(obj.var_max);
             };
             tthis.script = function(adiv, proc, cbck) {
               var callback = cbck;
               var obj = tthis.save(adiv, proc);
               var db_name = obj.db_name;
               var var_name = obj.var_name;
               var var_min = obj.var_min;
               var var_max = obj.var_max;
               return nedm.get_database(db_name).get_most_recent_value(var_name,
                 function(e, o) {
                   if (e) {
                     return callback(e);
                   }
                   if (o.rows.length != 1) {
                     return callback({error: var_name + " not found", reason: "Not found"});
                   }
                   var aval = o.rows[0].value;
                   if (!( aval >= var_min && aval <= var_max ) ) {
                     callback( { error: var_name + " (value: " + aval.toString() + ") out of range (" +
                                        var_min.toString() + " -> " + var_max.toString() + ")",
                                reason: "Out of range" });
                   } else {
                     callback(null, { "return" : "value (" + aval.toString() + ") in range (" +
                                        var_min.toString() + " -> " + var_max.toString() + ")" });
                   }
               });
             };
          }
          return new CheckObj();
        }
      """
    }
  },
  "max_shown_files" : 10,
  "protocol_clone" : """
    <div data-role="collapsible">
        <h2><span class="current_title">(No name)</span> <span class='current_status'></span></h2>
        <div data-role='controlgroup' data-type='horizontal' class='movement_arrows'>
          <button class='ui-btn ui-icon-arrow-u ui-btn-icon-notext move_up'>Move Up</button>
          <button class='ui-btn ui-icon-arrow-d ui-btn-icon-notext move_down'>Move Down</button>
          <button class='ui-btn ui-icon-delete ui-btn-icon-notext protocol_remove'>Remove</button>
        </div>
        <div data-role='controlgroup' data-type='horizontal'>
            <input type="text" class='step_name' value="(No name)">
            <select class='all_dbs'></select>
            <select class='protocol_type'></select>
        </div>
        <div class='protocol_settings'></div>
        <div>
          <span class="bolded_font">Status: </span><pre class="status_output"></pre>
        </div>
    </div>
""",
  "download_clone" : """
<div>
  <div class="ui-grid-a">
    <div class="ui-block-a">
        <h4>Name: <span class='filename'>(No name)</span></h4>
        <h4>Size (bytes): <span class='filelength'>(Not saved)</span></h4>
    </div>
    <div class="ui-block-b">
      <div data-role='controlgroup' data-type='horizontal'>
          <select class='downsample' data-native-menu="false">
            <option data-placeholder="true" value="">Downsample:</option>
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="5">5</option>
            <option value="10">10</option>
          </select>
          <a href="#" class='ui-btn file_name_class'>Download</a>
      </div>
    </div>
</div>
""",
  "protocol_table" : """
     <div class='protocol_table'></div>
     <div data-role='controlgroup' data-type='horizontal'>
       <button class="ui-btn ui-icon-plus ui-btn-icon-left add_protocol_line">Add protocol line</button>
       <button class="ui-btn add_loop_line">Add loop</button>
     </div>
""",
  "loop_code" : """
   <div class="ui-body ui-body-a ui-corner-all">
     <h3>Loop settings</h3>
     <div data-role="collapsible" data-theme="b">
       <h2>Code</h2>
       <div class='code_editor left'></div>
       <div data-role='controlgroup' data-type='horizontal'>
         <button class="ui-btn ui-icon-info ui-btn-icon-left help">Help</button>
         <button class="ui-btn ui-icon-recycle ui-btn-icon-left check">Check output</button>
       </div>
       <div data-role="popup" class="ui-content check_output">
       </div>
       <div data-role="popup" class="ui-content loop_description">
		 <p>The code written is in javascript or JSON and must be either a list
(array) or a function that returns a list.  The list should define objects in it, e.g.:
         <br><br>
         <code>[{something : 1, a : 'a'}, {something : 2, a : 'b'}]</code>
         <br><br>
         and later the variables can be referenced as e.g. <code>{{something}}</code> or <code>{{a}}</code>.
         If a function is to be used, it should have the form:
         <br><br>
         <code>
         function() {
           return [{something : 1, a : 'a'}, {something : 2, a : 'b'}];
}</code>
         <br><br>
		 where of course more complex calculations may done.  To test whether
or not the function works, run the process with "Dry Run" selected.
For an example measurement using system functions, see:
<a href='#' class='example_measurement'>example measurement</a>.
</p>
       </div>
     </div>
   </div>
""",

  "html" : """
<div>
    <div class='entire_protocol'>
      <div class="ui-body ui-body-a ui-corner-all" align="left">
        <h3>Name: <span class='measurement_name'>(No name)</span></h3>
        <h4>Saved: <span class='measurement_status'>(Not saved)</span></h4>
        <div data-role='controlgroup' data-type='horizontal'>
          <button class='collapse_all'>Collapse all</button>
        </div>
      </div>
      <div>
         <div class='ui-body ui-body-a current_protocol ui-disabled'>
            <h2>Protocol</h2>
            <div data-role='controlgroup' data-type='horizontal'>
              <button class="ui-btn run_process">Run process</button>
              <button class="ui-btn stop_process ui-disabled">Stop process</button>
              <label><input type="checkbox" class="dry_run_process"/>Dry run</label>
            </div>
         </div>
      </div>
      <div>
        <div data-role="collapsible" class="comment_code_collapsible">
          <h2>Log</h2>
          <div align='left'>
              <div class='ui-grid-b'>
                <div class='ui-block-a'>
                  <h4>Measurement name:</h4>
                </div>
                <div class='ui-block-b'>
                  <input type="text" class='set_measurement_name' value="(No name)">
                </div>
              </div>
              <div class="comment code_editor">
              </div>
          </div>
        </div>
        <div data-role="collapsible" class="alldoc__collapsible">
          <h2>All information</h2>
          <div align='left'>
            <div class="alldoc code_editor">
            </div>
          </div>
        </div>

        <div data-role="collapsible" class='list_of_files'>
          <h2>Attached files</h2>
          <div class="actual_file_list">
          </div>
          <div data-role='controlgroup' class='navigate_files ui-disabled' data-type='horizontal'>
            <button class="ui-btn ui-icon-arrow-l ui-btn-icon-notext go_left">Back</button>
            <input type="text" data-wrapper-class="controlgroup-textinput page-input ui-btn" value="0" class='page'>
            <button class="ui-btn ui-icon-arrow-r ui-btn-icon-notext go_right">Forward</button>
            of <span class="total_pages"></span> total page(s).
          </div>
        </div>

      </div>
    </div>
    <div>
      <div data-role='controlgroup' class='save_div' data-type='horizontal'>
        <label><input type='checkbox' class="overwrite_doc">Overwrite</label>
        <button class="ui-btn save_measurement">Save Measurement</button>
        <button class="ui-btn delete_measurement" disabled>Delete</button>
      </div>
      <p>
        When creating a new measurement (not Overwriting), attachments will *not* be transfered to the new document.
      </p>
    </div>
</div>
<div data-role="popup" id="measurementsDeleteConfirm" data-overlay-theme="b" data-theme="a"
  class="ui-corner-all ui-content center" data-dismissible="false">
    <h1>Delete measurement?</h1>
    <h3 class="ui-title">Are you sure you want to delete this measurement?</h3>
    <p>This action cannot be undone.</p>
    <a href="#" class='cancel_button' data-role="button" data-inline="true" data-rel="back" data-theme="a">Cancel</a>
    <a href="#" class='delete_button' data-role="button" data-inline="true" data-rel="back" data-transition="flow" data-theme="b">Delete</a>
</div>


""",
"script" : """
    function(thediv, docobj) {
      // Grab the line to clone before jquery mobile changes it
      var line_clone = $.parseHTML(docobj.protocol_clone.trim());
      var download_clone = $.parseHTML(docobj.download_clone.trim());
      var loop_clone = $.parseHTML(docobj.protocol_table.trim());
      var loop_code_clone = $.parseHTML(docobj.loop_code.trim());
      var prot_sel = $('.protocol_type', $(line_clone));
      var toastr = require("toastr");
      var command_obj = {};
      var this_db = nedm.get_database();

      // Set the link
      function set_load_example(ev) {
         $(ev.currentTarget).closest('[data-role=popup]').popup('close');
         load_with_docid("measurement_example");
      }

      theCurrentPage.find('.example_measurement').on('click', set_load_example);

      function add_loop_code_window($after) {
          var $code_div = $(loop_code_clone).clone();
          $after.after($code_div);
          var $popUp = $code_div.find('[data-role=popup]')
              .css({
                width : '80%',
                'max-width' : '800px'
              }).popup();
          $popUp.find('.example_measurement').on('click', set_load_example);
          $code_div.trigger('create');
          var ed = ace.edit($code_div.find('.code_editor')[0]);
          ed.getSession().setMode('ace/mode/javascript');
          ed.setTheme('ace/theme/xcode');
          $code_div.find('.code_editor').data({ edit : ed });
          $('.help', $code_div).on('click', function(ev) {
            $popUp.filter('.loop_description').popup("open");
          });
          $('.check', $code_div).on('click', function(ev) {
            var fo = $popUp.filter('.check_output');
            fo.empty();
            try {
              parse_loop_code($code_div.find('.code_editor')).forEach(function(o) {
                 fo.append("<code>" + JSON.stringify(o) + ",</code><br>");
              });
            } catch (e) {
              fo.append("<p>Error: " + e.name + "<br>Message: " + e.message + "</p>");
            }
            fo.filter('.check_output').popup("open");
          });
          $code_div.on('collapsibleexpand', function() {
            ed.resize();
          });
      }

      function add_loop_after($after) {
          var $nc = $(loop_clone).clone();
          $after.after($nc)
                .siblings('[data-role=controlgroup]')
                .controlgroup();
          $('.add_protocol_line', $after.siblings('[data-role=controlgroup]')).on("click", function(ev) {
            add_protocol_line_fn($(ev.currentTarget).parents('[data-role=controlgroup]').siblings('.protocol_table'));
          });
          $('.add_loop_line', $after.siblings('[data-role=controlgroup]')).on("click", function(ev) {
            var pt = $(ev.currentTarget).parents('[data-role=controlgroup]').siblings('.protocol_table');
            add_protocol_line_fn(pt);
            $('.movement_arrows ~ ', pt.children(':last-child')).remove();
            $('.current_title', pt.children(':last-child')).text('Loop');
            add_loop_after($('.movement_arrows', pt.children(':last-child')));
            add_loop_code_window($('.movement_arrows', pt.children(':last-child')));
          });
      }

      function parse_loop_code($code_editor, proc) {
          proc = proc || function(o) { return o; };
          /* jshint -W061 */
          var v_c = eval('(' + proc($code_editor.data('edit').getSession().getValue() || '[]') + ')');
          if (typeof v_c === 'function') {
            v_c = v_c();
          }
          if (!Array.isArray(v_c)) {
            throw {name : "Not array", message : "object must either be an array or create an array"};
          }
          return v_c;
      }



      add_loop_after($('.current_protocol > h2', thediv));

      function moveUp(ev) {
        var $el = $(ev.currentTarget).closest(".protocol_clone_act");
        $el.prev().before($el);
      }
      function moveDown(ev) {
        var $el = $(ev.currentTarget).closest(".protocol_clone_act");
        $el.next().after($el);
      }

      var add_protocol_line_fn = function(proto_table, obj) {
         var nc = $(line_clone).clone();
         nc.removeClass('protocol_clone').addClass('protocol_clone_act');
         nc.show();
         var curr_number = proto_table.children(".protocol_clone_act").length;
         $('.protocol_remove', $(nc)).on("click", remove_function);
         $('.step_name', $(nc)).on("change", function(e) {
           $(".current_title", $(nc)).text($(e.currentTarget).val());
         });
         $('.protocol_type', $(nc)).on("change", handle_type_change);
         $('.all_dbs', $(nc)).on("change", handle_type_change);
         $('.move_up', $(nc)).on("click", moveUp);
         $('.move_down', $(nc)).on("click", moveDown);
         proto_table.append(nc);
         proto_table.trigger("create");
         $('select.protocol_type', $(nc)).selectmenu('refresh');
         if (obj) {
           for (var k in obj) {
             var o = obj[k];
             $('select.all_dbs', $(nc)).val(o.db_name).trigger('change');
             $('select.protocol_type', $(nc)).val(k).trigger('change');
             $('.step_name', $(nc)).val(o.name).trigger('change');
             check_protocol(nc, o);
             command_obj[k].set(nc, o);
             if (o.status) $('.status_output', $(nc)).text(o.status);
           }
         }
      };

      // Database cache, caches the available databases
      function DatabaseCache() {
        function VarType() {
            var listeners = [];
            var content = null;
            this.callback_or_listen = function(cbck) {
                if (!content) listeners[listeners.length] = cbck;
                else cbck(content);
            };
            this.set_content = function(acnt) {
                content = acnt;
                listeners.forEach( function(o) { o(content); } );
                listeners = [];
            };
        }
        var myvars = {
          commands : new VarType(),
          variables : new VarType()
        };
        var that = this;
        var define_function = function(var_name) {
          that["set_" + var_name] = myvars[var_name].set_content;
          that["get_" + var_name] = myvars[var_name].callback_or_listen;
        };

        // This sets the interface
        for (var k in myvars) {
          define_function(k);
        }
      }
      // Provides a central cache of information for dbs, etc.
      function CentralCache() {
        var all_dbs = [];
        var that = this;
        this.get_db = function(aname) {
          return all_dbs[aname];
        };
        this.add_db = function(aname) {
          all_dbs[aname] = new DatabaseCache();
          return that.get_db(aname);
        };
      }
      var central_cache = new CentralCache();
      for (var x in docobj.protocol_types) {
        var t = docobj.protocol_types[x];
        /* jshint -W061 */
        var obj = eval("(" + t.object + ")")();
        var new_opt = $('<option/>').text(x).val(x);
        prot_sel.append(new_opt);
        var new_div = $('<div/>').addClass(x + "_class").append(t.html).hide();
        command_obj[x] = obj;
        $('.protocol_settings', $(line_clone)).append(new_div);
      }

      var remove_function = function(e) {
         $(e.currentTarget).closest(".protocol_clone_act").remove();
      };

      var handle_type_change = function(e) {
        var affected_div = $(e.currentTarget).closest(".protocol_clone_act");
        $('.protocol_settings', affected_div).children().each(function() {
          $(this).hide();
        });
        var cl = $('.protocol_type', affected_div).find(":selected").val();
        $('.protocol_settings .' + cl + '_class', affected_div).show();
        if (command_obj[cl].setup_function) {
          command_obj[cl].setup_function(affected_div, central_cache);
        }
      };


      var load_database_info = function(adb) {
          var my_db = central_cache.get_db(adb);
          nedm.get_database(adb).getCommands( my_db.set_commands );
          nedm.get_database(adb).getVariableNames( my_db.set_variables );
      };

      nedm.get_database_info(function(all_dbs) {
         var adbs = $('.all_dbs', $(line_clone));
         for (var x in all_dbs) {
           adbs.append($("<option/>").text(all_dbs[x].prettyname).val('nedm%2F' + x));
           central_cache.add_db("nedm%2F" + x);
           load_database_info("nedm%2F" + x);
         }
         $('.current_protocol', $(thediv)).removeClass('ui-disabled');
      });

      var should_stop = false;
      var protocol_run = [];
      var abort_step;
      var run_process = function(e) {
         should_stop = false;
         var dry_run = $('.dry_run_process', thediv).is(':checked');
         var process_list = $('.current_protocol > .protocol_table', thediv);
         var disable_list = [ $(e.currentTarget), process_list, $('.add_protocol_line,.dry_run_process', $(thediv))];
         disable_list.forEach( function(o) { o.addClass("ui-disabled"); });
         $(".stop_process", $(thediv)).removeClass("ui-disabled");
         abort_step = null;
         protocol_run = [];
         var error_seen;
         function run_list(alist, var_context, cbck) {
           var v_c = (var_context || [{}]).slice();
           var cur_list = alist.slice();
           var cur_v_c = v_c[0];
           v_c.shift();
           function run_next(success) {
             if (success) {
               if (cur_list.length > 0) {
                 var o = cur_list[0];
                 cur_list.shift();
                 run_step(o, cur_v_c, run_next);
               } else if (v_c.length > 0) {
                 run_list(alist, v_c, cbck);
               } else {
                 if(cbck) cbck(true);
                 else {
                   disable_list.forEach( function(o) { o.removeClass("ui-disabled"); });
                   $(".stop_process", $(thediv)).addClass("ui-disabled");
                 }
               }
             } else {
               if (cbck) {
                 cbck(false);
               } else {
                 disable_list.forEach( function(o) { o.removeClass("ui-disabled"); });
                 $(".stop_process", $(thediv)).addClass("ui-disabled");
                 if (error_seen) {
                   nedm.show_error_window(error_seen.reason, error_seen.error);
                 }
               }
             }
           }
           run_next(true);
         }
         function updateStatus(as, success) {
           var $cs = as.find('.current_status').first();
           $cs.removeClass("nedm-status-button-loading");
           if (success) {
             $cs.addClass("nedm-status-button-g");
             as.collapsible("collapse");
           } else {
             $cs.addClass("nedm-status-button-r");
           }
         }

         var handlebars = require("handlebars");
         function run_step(astep, var_context, cbck) {
             var as = $(astep);
             as.collapsible("expand");
             as.find(".current_status").first().addClass("nedm-status-button-loading");

             function proc(o) {
               return handlebars.compile(o)(var_context);
             }
             if ($('.protocol_table', as).length !== 0) {
               var v_c;
               try {
                 v_c = parse_loop_code(as.find('.code_editor').first(), proc);
                 v_c = v_c.map( function(o) {
                   for (var k in var_context) {
                     if (!o[k]) {
                       o[k] = var_context[k];
                     }
                   }
                   return o;
                 });
               } catch (e) {
                 toastr.error(e.message, e.name);
                 updateStatus(as, false);
                 cbck(false);
                 return;
               }
               run_list(as.find('.protocol_table').first().children(".protocol_clone_act").toArray(), v_c, function(success) {
                 updateStatus(as, success);
                 cbck(success);
               });
               return;
             }
             var cl = $('.protocol_type', as).find(":selected").val();
             var func = command_obj[cl].script;
             protocol_run[protocol_run.length] = command_obj[cl].save(as, proc);
             if (dry_run) {
               updateStatus(as, true);
               cbck(true);
             } else {
               abort_step = func( as, proc, function(err, obj) {
                 var msg;
                 if (!err) {
                   msg = obj.return;
                 } else {
                   msg = "Error: " + err.error + ", reason: " + err.reason;
                   error_seen = err;
                 }
                 protocol_run[protocol_run.length-1].msg = msg;
                 protocol_run[protocol_run.length-1].success= !err;
                 updateStatus(as, !err);
                 $('.status_output', as).text(msg);
                 cbck(!(should_stop || err));
               });
             }
         }
         $(".current_status", process_list).each( function () {
           $(this).removeClass("nedm-status-button-r nedm-status-button-g nedm-status-button-loading");
         });
         run_list($(process_list).children(".protocol_clone_act").toArray());
      };
      $('.run_process', $(thediv)).on("click", run_process);
      $('.stop_process', $(thediv)).on("click", function(e) {
         $(e.currentTarget).addClass("ui-disabled");
         should_stop = true;
         if (abort_step) abort_step.abort();
      });

      //*****************************************************
      // Deal with files
      var set_uploaded = function(obj, url) {
        var o = $('.file_name_class', $(obj));
        o.attr('href', url).data('uploaded', true);
        o.closest('.add_one_file_class').find('.progress_bar')
           .replaceWith($('<span/>').text('Uploaded, remove will delete'));
      };
      var add_file_fn = function(thefile) {
        var new_obj = $(download_clone).clone();
        $('.filename', $(new_obj)).text(thefile.name);
        $('.filelength', $(new_obj)).text(thefile.length);
        if (!thefile.params.downsample) {
          $('.downsample', $(new_obj)).remove();
        }
        function exec_download(uri) {
          $.ajax( {
            url: uri,
         method: "HEAD",
        success: function() {
            // download the file
            toastr.info("Beginning download", "Success");
            window.location = uri;
          },
          error: function(o) {
            toastr.error("Failed url: " + uri, o.statusText);
          }
          });
        }
        function download_file(ev) {
          ev.preventDefault();
          var dat = $(ev.currentTarget).data();
          if (dat.href && !dat.downsample) {
            exec_download(dat.href);
          } else {
            var ds = $("select.downsample", $(ev.currentTarget).parent()).val();
            if (ds === "") {
              toastr.error("select downsample before downloading", "Downsample");
              return;
            }
            var href = dat.href;
            if (typeof ds !== "undefined" && parseInt(ds) > 1) {
              href += "/downsample/" + ds;
            }
            exec_download(href);
          }
        }
        $('.file_name_class', $(new_obj)).data(thefile.params)
                                         .on('click', download_file);
        $('.actual_file_list', $(thediv)).append(new_obj);
        $('select', $(new_obj)).selectmenu();
        $('select.downsample', $(new_obj)).val(1).selectmenu("refresh");
        $('[data-role="controlgroup"]', $(new_obj)).controlgroup();
      };
      $('.file_remove', $(thediv)).on("click", function(ev) {
          var tgt = $(ev.currentTarget).closest(".add_one_file_class");
          tgt.addClass('ui-disabled');
          var file_obj = $(tgt).find('.file_name_class');
          var remove_and_delete = function() {
            if (tgt.closest('.actual_file_list').find('.add_one_file_class').length == 1) {
              tgt.replaceWith(file_cloner.clone(true));
            } else {
              tgt.remove();
            }
          };

          if (file_obj.data('uploaded')) {
            // Try to delete it...
            var id = $(thediv).data('current_doc');
            this_db.removeAttachment(
              { _id : id },
              file_obj.text(),
              function(err, obj) {
                if (err) {
                  nedm.show_error_window("Couldn't remove attachment");
                  tgt.removeClass('ui-disabled');
                } else {
                  remove_and_delete();
                }
                load_with_docid(id);
            });
          } else {
            remove_and_delete();
          }
      });
      var file_cloner = $('.add_one_file_class').clone(true);

      var get_all_files = function() {
        return $.map($('.actual_file_list', $(thediv)).find('.file_name_class'),
              function(o) {
                if ($(o).data('uploaded')) return null;
                return { obj: $(o), file: $(o).data('file') };
              });
      };
      //*****************************************************

      //*****************************************************
      // Get direct properties
      var save_id = function(anid) {
        $(thediv).data('current_doc', anid);
        var msg = anid || '(Not saved)';
        $('.measurement_status', $(thediv)).text(msg);
      };
      var set_measurement_name = function(aname) {
        var an = aname || "(No name)";
        $('.measurement_name', $(thediv)).text(an);
      };
      $('.set_measurement_name').on("change", function(ev) {
        set_measurement_name($(ev.currentTarget).val());
      });
      //*****************************************************

      //*****************************************************
      // Set up text editor
      var cmt = $('.code_editor', $(thediv));
      var editor = ace.edit(cmt[0]);
      editor.setTheme('ace/theme/xcode');
      cmt.data({editor : editor});
      editor.getSession().setValue("");
      $('.comment_code_collapsible', $(thediv)).on("collapsibleexpand", function() {
        editor.resize();
      });

      var alldoc = $('.alldoc', $(thediv));
      var jsoneditor = require('jsoneditor');
      var alldoc_editor = new jsoneditor(alldoc[0], { mode : "code" });
      $('.alldoc__collapsible', $(thediv)).on("collapsibleexpand", function() {
        alldoc_editor.resize();
      });



      //*****************************************************

      //*****************************************************
      // Upload files
      var cancel_upload = false;
      var cncl_btn = $('.cancel_upload', $(thediv));
      cncl_btn.on('click', function() {
        cancel_upload = true;
        cncl_btn.addClass('ui-disabled');
      });
      var upload_btn = $('.upload_files', $(thediv));

      var upload_files = function(ev) {
        var the_doc = { _id : $(thediv).data('current_doc') };
        if (!the_doc._id) {
          nedm.show_error_window("Unsaved doc", "Measurement needs to be saved before documents can be uploaded");
          return;
        }
        cancel_upload = false;
        var file_setup = $('.file_remove', $(thediv));
        file_setup.addClass('ui-disabled');
        cncl_btn.removeClass('ui-disabled');
        upload_btn.addClass('ui-disabled');
        var reset_disabled_state = function() {
          load_with_docid(the_doc._id);
          file_setup.removeClass('ui-disabled');
          cncl_btn.addClass('ui-disabled');
          upload_btn.removeClass('ui-disabled');
        };
        var fes = get_all_files();
        var i = 0;
        var add_next_file = function(doc) {
          if (i >= fes.length) {
            reset_disabled_state();
            return;
          }
          var curr_obj = fes[i];
          var curr_progress = curr_obj.obj.closest('.add_one_file_class').find('.progress_bar');
          curr_progress.val(0);
          curr_progress.show();
          function Callbacks() {
              var tthis = this;
              tthis.xhr = null;
              tthis.progress =  function(evt) {
                if (evt.lengthComputable) {
                  curr_progress.val(100*evt.loaded/evt.total);
                }
                if (cancel_upload && tthis.xhr) tthis.xhr.abort();
              };
              tthis.success = function(err, obj) {
                if (err) {
                  var msg = "Error loading file: " + curr_obj.file.name;
                  if (cancel_upload) msg = "User requested cancel";
                  nedm.show_error_window(msg);
                  reset_disabled_state();
                  return;
                }
                curr_progress.val(100);
                set_uploaded(curr_obj.obj,
                  this_db.url+"/" + doc._id+"/"+curr_obj.obj.text());
                i += 1;
                add_next_file(doc);
              };
          }

          this_db.addAttachment(doc,
            curr_obj.file, new Callbacks());
        };
        add_next_file(the_doc);
      };
      upload_btn.on('click', upload_files);

      //*****************************************************

      //*****************************************************

      // Check measurement
      var check_protocol = function(proto, cmp) {
        var as = $(proto);
        var cl = $('.protocol_type', as).find(":selected").val();
        var name = $('.step_name', as).val();
        var tmp_obj = command_obj[cl].save(as);
        var passed = true;
        if (!cmp) {
          for (var k in tmp_obj) {
            if (tmp_obj[k] === null) {
              nedm.show_error_window(k + " is 'null' in " + name);
              passed = false;
            }
          }
        } else {
          for (var i in tmp_obj) {
            if (!(i in cmp)) {
              nedm.show_error_window(i + " (expected) not found in " + name);
              passed = false;
            } else if (cmp[i] === null) {
              nedm.show_error_window(i + " is 'null' in " + name);
              passed = false;
            }
          }
        }
        return passed;
      };
      $('.delete_measurement').on('click', function(ev) {
        var $dc = theCurrentPage.find('#measurementsDeleteConfirm');
        var doc = $(this).data('doc');
        $('.delete_button', $dc).off().on('click', function() {
          nedm.get_database().removeDoc( doc , function(e, o) {
            if(e) {
              nedm.show_error_window(e.error, e.reason);
            } else {
              toastr.info("Success", "Document: " + o.id + " removed");
              // Load in open object
              load_from_object({});
            }

          });
        });
        theCurrentPage.find('#measurementsDeleteConfirm').popup('open');
      });
      // Save measurement
      $('.save_measurement').on('click', function(ev) {
        var protocol_list = [];
        var tthis = $(ev.currentTarget);
        function get_information(astep, alist) {
          var as = astep;
          if (as.length === 0) return;
          if ($('.protocol_table', as).length !== 0) {
            var new_list = [];
            get_information($('.protocol_table', as).children(".protocol_clone_act").first(), new_list);
            alist[alist.length] = {
             javascript: as.find('.code_editor').first().data('edit').getSession().getValue(),
              protocol : new_list
            };
          } else {
            var cl = $('.protocol_type', as).find(":selected").val();
            if (!check_protocol(as)) {
              throw { reason : "Errors in " + $('.step_name', as).val(), error : "Not saved"};
            }
            var obj = {};
            obj[cl] = command_obj[cl].save(as);
            obj[cl].name = $('.step_name', as).val();
            obj[cl].status = $('.status_output', as).text();
            alist[alist.length] = obj;
          }
          get_information($(as).next(".protocol_clone_act"), alist);
        }
        try {
          get_information($('.current_protocol > .protocol_table').children(".protocol_clone_act").first(), protocol_list);
        } catch (e) {
          toastr.error(e.reason, e.error);
          return;
        }
        $('.entire_protocol', $(thediv)).addClass('ui-disabled');
        var adoc;
        try {
          adoc = alldoc_editor.get();
        } catch (e) {
          toastr.error("JSON in 'All information' improperly formatted.", "Formatting error");
          $('.entire_protocol', $(thediv)).removeClass('ui-disabled');
          return;
        }

        var newdoc = {
          type : "measurement",
          log : cmt.data('editor').getSession().getValue(),
          protocol : protocol_list,
          measurement_run : protocol_run,
          measurement_name : $('.set_measurement_name', $(thediv)).val()
        };
        for (var k in newdoc) {
          adoc[k] = newdoc[k];
        }
        var call_func = function(thed, cbck) {
          this_db.updateDoc(thed, "nedm_default", "insert_with_timestamp", cbck);
        };
        if ($(".overwrite_doc", $(thediv)).prop("checked")) {
          // Try to post it
          call_func = function(thed, cbck) {
            this_db.saveDoc(thed, cbck);
          };
        } else {
          // Remove id info from *this* document
          ["_id", "_rev", "created_by", "_attachments", "external_docs"].forEach(function(o) {
            if (adoc[o]) delete adoc[o];
          });
        }
        call_func(adoc, function(err, obj) {
              $('.entire_protocol', $(thediv)).removeClass('ui-disabled');
              var err_msg = err || obj.error;
              if (err_msg) {
                toastr.error(JSON.stringify(err_msg), "Save doc error");
              } else {
                this_db.getDoc(obj.id,
                  function(e, o) {
                    if (e) {
                      toastr.error(JSON.stringify(err), "Error reloading document");
                    } else {
                      load_from_object(o);
                    }
                });
              }
        });

      });

      function AllFiles(obj) {
        var o = obj || {};
        var eds = o.external_docs || {};
        var all_files = Object.keys(eds || {});
        var pat = /-([0-9]+)\.dig/;
        all_files.sort( function(a, b) {
          var num_a = pat.exec(a);
          var num_b = pat.exec(b);
          if (num_b && num_a) {
            return parseInt(num_a[1]) - parseInt(num_b[1]);
          } else return a-b;
        });
        var total_pages = parseInt(all_files.length/docobj.max_shown_files) + 1;
        var shown_page = -1;
        $('.total_pages', $(thediv)).text(total_pages);

        function show_page(apage) {
          var the_page = apage || 1;
          if (the_page < 1) the_page = 1;
          if (the_page > total_pages) the_page = total_pages;

          if (the_page == 1) {
            $('.go_left', $(thediv)).addClass('ui-disabled');
          } else {
            $('.go_left', $(thediv)).removeClass('ui-disabled');
          }
          if (the_page == total_pages) {
            $('.go_right', $(thediv)).addClass('ui-disabled');
          } else {
            $('.go_right', $(thediv)).removeClass('ui-disabled');
          }
          $('.page-input :input', $(thediv)).val(the_page);

          if (the_page === shown_page) return;
          shown_page = the_page;

          $('.actual_file_list', $(thediv)).empty();
          var base_obj = {
            id : o._id,
            db : "nedm%2F" + this_db.db_name()
          };
          var start_page = (the_page - 1) * docobj.max_shown_files;
          var consider_array = all_files.slice(start_page, start_page + docobj.max_shown_files);
          for( var i = 0;i<consider_array.length;i++) {
            var k = consider_array[i];
            base_obj.name = eds[k].ondiskname;
            add_file_fn(
               { name : k,
               length : eds[k].size,
               params : {
                   href : "/_attachments/" + base_obj.db + "/" + base_obj.id + "/" + base_obj.name,
             downsample : k.split('.').pop() === "dig"
              }
            });
          }
        }


        $('.go_left', $(thediv)).off().on('click', function() {
          show_page(parseInt($('.page-input :input', $(thediv)).val()) - 1);
        });
        $('.go_right', $(thediv)).off().on('click', function() {
          show_page(parseInt($('.page-input :input', $(thediv)).val()) + 1);
        });
        $('.page-input :input', $(thediv)).off().on('change', function(ev) {
          var pg = parseInt($(ev.currentTarget).val());
          if (!isNaN(pg)) {
            show_page(pg);
          } else {
            $('.page-input :input', $(thediv)).val(shown_page);
          }
        });

        if (total_pages == 1) {
          $('.navigate_files', $(thediv)).addClass('ui-disabled');
        } else {
          $('.navigate_files', $(thediv)).removeClass('ui-disabled');
        }
        show_page();
      }

      var curr_files = new AllFiles();
      //*****************************************************
      // Load measurement
      var load_from_object = function(obj) {
        var k, cur;
        cmt.data('editor').getSession().setValue(obj.log);
        alldoc_editor.set(obj);
        // Do protocol
        var $proto_table = $('.current_protocol > .protocol_table', thediv);
        $proto_table.children('.protocol_clone_act').each(function() {
          $(this).remove();
        });

        function add_protocol($pt, prot) {
          if (Array.isArray(prot) || prot.protocol) {
            var js = prot.javascript || "";
            var ptc = prot.protocol || prot;
            $('.add_loop_line', $pt.siblings()).trigger('click');
            var $new_pt = $('.protocol_table', $pt.children().last());
            $new_pt.parent().find('.code_editor').first().data('edit').getSession().setValue(js);
            for (var i = 0;i<ptc.length;i++) {
              add_protocol($new_pt, ptc[i]);
            }
          } else {
            add_protocol_line_fn($pt, prot);
          }
        }
        if (obj.protocol) {
          for (var i = 0;i<obj.protocol.length;i++) {
            add_protocol($proto_table, obj.protocol[i]);
          }
        }
        curr_files = new AllFiles(obj);
        $('.set_measurement_name', $(thediv))
                  .val(obj.measurement_name || "(No name)")
                  .trigger('change');
        save_id(obj._id);
        $('.delete_measurement', $(thediv))
          .prop('disabled', (typeof obj._id === 'undefined'))
          .data('doc', obj);
      };
      var load_with_docid = function(doc_id) {
        this_db.getDoc(doc_id,
          function(err, obj) {
            if (err) {
              nedm.show_error_window("Document not found: " + doc_id);
            } else {
              load_from_object(obj);
            }
        });
      };

      // Export the ability to load from other controls
      $(thediv).addClass('current_measurement_view').data(
        { load_with_docid : load_with_docid } );

      // Collapse all collapsibles
      $('.collapse_all', $(thediv)).on('click', function() {
        $('.ui-collapsible', $(thediv)).collapsible('collapse');
      });

  }
"""
}
